{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows 11\\\\Downloads\\\\ai-mental-health-companion\\\\client\\\\src\\\\app.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const moodOptions = [\"I'm feeling sad\", \"I need motivation\", \"I feel anxious\", \"I just want to talk\"];\n  const handleOptionSelect = async option => {\n    setSelectedOption(option);\n    const initialMessage = {\n      sender: \"user\",\n      text: option\n    };\n    setMessages([initialMessage]);\n    try {\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: option\n        })\n      });\n      const data = await response.json();\n      setMessages([initialMessage, {\n        sender: \"bot\",\n        text: data.response\n      }]);\n    } catch (error) {\n      setMessages([initialMessage, {\n        sender: \"bot\",\n        text: \"Error: Failed to get response from OpenAI\"\n      }]);\n    }\n  };\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      sender: \"user\",\n      text: input\n    }];\n    setMessages(newMessages);\n    try {\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n      setMessages([...newMessages, {\n        sender: \"bot\",\n        text: data.response\n      }]);\n    } catch (error) {\n      setMessages([...newMessages, {\n        sender: \"bot\",\n        text: \"Error: Failed to get response from OpenAI\"\n      }]);\n    }\n    setInput(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Mental Health Companion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), !selectedOption ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select how you feel to start chatting:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), moodOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleOptionSelect(option),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.sender === \"user\" ? \"You\" : \"AI\", \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this), \" \", msg.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2HAWebdEPIhJZ34g3+y+wweQXkU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedOption","setSelectedOption","messages","setMessages","input","setInput","moodOptions","handleOptionSelect","option","initialMessage","sender","text","response","fetch","method","headers","body","JSON","stringify","message","data","json","error","handleSend","trim","newMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","msg","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Windows 11/Downloads/ai-mental-health-companion/client/src/app.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const moodOptions = [\r\n    \"I'm feeling sad\",\r\n    \"I need motivation\",\r\n    \"I feel anxious\",\r\n    \"I just want to talk\",\r\n  ];\r\n\r\n  const handleOptionSelect = async (option) => {\r\n    setSelectedOption(option);\r\n    const initialMessage = { sender: \"user\", text: option };\r\n    setMessages([initialMessage]);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ message: option }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      setMessages([initialMessage, { sender: \"bot\", text: data.response }]);\r\n    } catch (error) {\r\n      setMessages([\r\n        initialMessage,\r\n        { sender: \"bot\", text: \"Error: Failed to get response from OpenAI\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const newMessages = [...messages, { sender: \"user\", text: input }];\r\n    setMessages(newMessages);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      setMessages([...newMessages, { sender: \"bot\", text: data.response }]);\r\n    } catch (error) {\r\n      setMessages([\r\n        ...newMessages,\r\n        { sender: \"bot\", text: \"Error: Failed to get response from OpenAI\" },\r\n      ]);\r\n    }\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <h2>AI Mental Health Companion</h2>\r\n\r\n      {!selectedOption ? (\r\n        <div className=\"options-box\">\r\n          <h4>Select how you feel to start chatting:</h4>\r\n          {moodOptions.map((option, index) => (\r\n            <button key={index} onClick={() => handleOptionSelect(option)}>\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"chat-box\">\r\n            {messages.map((msg, index) => (\r\n              <div\r\n                key={index}\r\n                className={`chat-message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`}\r\n              >\r\n                <strong>{msg.sender === \"user\" ? \"You\" : \"AI\"}:</strong> {msg.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"input-box\">\r\n            <input\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              placeholder=\"Type a message...\"\r\n            />\r\n            <button onClick={handleSend}>Send</button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}