{"ast":null,"code":"require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst OpenAI = require('openai');\nconst app = express();\nconst port = 5000;\napp.use(cors());\napp.use(express.json());\n\n// Define response sets per option\nconst responseSets = {\n  motivation: {\n    \"hello\": \"Hi! Ready to feel motivated today?\",\n    \"i am sad\": \"It's okay to feel down sometimes. You can get through this!\",\n    \"need help\": \"Remember, every step forward counts. Keep pushing!\"\n  },\n  anxiety: {\n    \"hello\": \"Hello! Let's work on calming your mind.\",\n    \"i am anxious\": \"Try to breathe slowly. You’re doing great!\",\n    \"need help\": \"Focus on the present moment. You’ve got this!\"\n  },\n  talk: {\n    \"hello\": \"Hey there! Feel free to share anything you want.\",\n    \"i feel lonely\": \"I'm here with you. You’re not alone.\",\n    \"need help\": \"Sometimes talking helps. I'm listening.\"\n  }\n};\n\n// Initialize OpenAI client (optional, can use AI or fixed responses)\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\napp.post('/api/chat', async (req, res) => {\n  const {\n    option,\n    message\n  } = req.body;\n  if (!option || !message) {\n    return res.status(400).json({\n      error: 'Option and message are required'\n    });\n  }\n  const optionKey = option.toLowerCase().trim();\n  const userMsg = message.toLowerCase().trim();\n\n  // Check if fixed response exists for this option and message\n  if (responseSets[optionKey] && responseSets[optionKey][userMsg]) {\n    return res.json({\n      response: responseSets[optionKey][userMsg]\n    });\n  }\n\n  // If no fixed response, fallback to OpenAI API (optional)\n  try {\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [{\n        role: 'system',\n        content: `You are a helpful assistant specialized in ${optionKey}.`\n      }, {\n        role: 'user',\n        content: message\n      }]\n    });\n    res.json({\n      response: completion.choices[0].message.content\n    });\n  } catch (error) {\n    console.error('OpenAI API error:', error);\n    res.status(500).json({\n      error: 'Failed to get response from OpenAI'\n    });\n  }\n});\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["require","config","express","cors","OpenAI","app","port","use","json","responseSets","motivation","anxiety","talk","openai","apiKey","process","env","OPENAI_API_KEY","post","req","res","option","message","body","status","error","optionKey","toLowerCase","trim","userMsg","response","completion","chat","completions","create","model","messages","role","content","choices","console","listen","log"],"sources":["C:/Users/Windows 11/Downloads/ai-mental-health-companion/client/src/index.js"],"sourcesContent":["require('dotenv').config();\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst OpenAI = require('openai');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Define response sets per option\r\nconst responseSets = {\r\n  motivation: {\r\n    \"hello\": \"Hi! Ready to feel motivated today?\",\r\n    \"i am sad\": \"It's okay to feel down sometimes. You can get through this!\",\r\n    \"need help\": \"Remember, every step forward counts. Keep pushing!\",\r\n  },\r\n  anxiety: {\r\n    \"hello\": \"Hello! Let's work on calming your mind.\",\r\n    \"i am anxious\": \"Try to breathe slowly. You’re doing great!\",\r\n    \"need help\": \"Focus on the present moment. You’ve got this!\",\r\n  },\r\n  talk: {\r\n    \"hello\": \"Hey there! Feel free to share anything you want.\",\r\n    \"i feel lonely\": \"I'm here with you. You’re not alone.\",\r\n    \"need help\": \"Sometimes talking helps. I'm listening.\",\r\n  }\r\n};\r\n\r\n// Initialize OpenAI client (optional, can use AI or fixed responses)\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n});\r\n\r\napp.post('/api/chat', async (req, res) => {\r\n  const { option, message } = req.body;\r\n  if (!option || !message) {\r\n    return res.status(400).json({ error: 'Option and message are required' });\r\n  }\r\n\r\n  const optionKey = option.toLowerCase().trim();\r\n  const userMsg = message.toLowerCase().trim();\r\n\r\n  // Check if fixed response exists for this option and message\r\n  if (responseSets[optionKey] && responseSets[optionKey][userMsg]) {\r\n    return res.json({ response: responseSets[optionKey][userMsg] });\r\n  }\r\n\r\n  // If no fixed response, fallback to OpenAI API (optional)\r\n  try {\r\n    const completion = await openai.chat.completions.create({\r\n      model: 'gpt-3.5-turbo',\r\n      messages: [\r\n        { role: 'system', content: `You are a helpful assistant specialized in ${optionKey}.` },\r\n        { role: 'user', content: message }\r\n      ],\r\n    });\r\n\r\n    res.json({ response: completion.choices[0].message.content });\r\n  } catch (error) {\r\n    console.error('OpenAI API error:', error);\r\n    res.status(500).json({ error: 'Failed to get response from OpenAI' });\r\n  }\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running on http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}