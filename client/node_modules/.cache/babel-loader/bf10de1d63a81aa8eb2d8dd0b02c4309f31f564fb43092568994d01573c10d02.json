{"ast":null,"code":"const handleSend = async () => {\n  if (!input.trim()) return;\n  const newMessages = [...messages, {\n    sender: \"user\",\n    text: input\n  }];\n  setMessages(newMessages);\n  try {\n    const response = await fetch(\"http://localhost:5000/api/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        option: selectedOption.trim().toLowerCase(),\n        // ⬅️ This is the line\n        message: input\n      })\n    });\n    const data = await response.json();\n    setMessages([...newMessages, {\n      sender: \"bot\",\n      text: data.response\n    }]);\n  } catch (error) {\n    setMessages([...newMessages, {\n      sender: \"bot\",\n      text: \"Error: Failed to get response from server\"\n    }]);\n  }\n  setInput(\"\");\n};","map":{"version":3,"names":["handleSend","input","trim","newMessages","messages","sender","text","setMessages","response","fetch","method","headers","body","JSON","stringify","option","selectedOption","toLowerCase","message","data","json","error","setInput"],"sources":["C:/Users/Windows 11/Downloads/ai-mental-health-companion/client/src/app.js"],"sourcesContent":["const handleSend = async () => {\r\n  if (!input.trim()) return;\r\n\r\n  const newMessages = [...messages, { sender: \"user\", text: input }];\r\n  setMessages(newMessages);\r\n\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/chat\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ \r\n        option: selectedOption.trim().toLowerCase(),  // ⬅️ This is the line\r\n        message: input \r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    setMessages([...newMessages, { sender: \"bot\", text: data.response }]);\r\n  } catch (error) {\r\n    setMessages([\r\n      ...newMessages,\r\n      { sender: \"bot\", text: \"Error: Failed to get response from server\" },\r\n    ]);\r\n  }\r\n\r\n  setInput(\"\");\r\n};\r\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;EAEnB,MAAMC,WAAW,GAAG,CAAC,GAAGC,QAAQ,EAAE;IAAEC,MAAM,EAAE,MAAM;IAAEC,IAAI,EAAEL;EAAM,CAAC,CAAC;EAClEM,WAAW,CAACJ,WAAW,CAAC;EAExB,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,MAAM,EAAEC,cAAc,CAACd,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC;QAAG;QAC9CC,OAAO,EAAEjB;MACX,CAAC;IACH,CAAC,CAAC;IAEF,MAAMkB,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClCb,WAAW,CAAC,CAAC,GAAGJ,WAAW,EAAE;MAAEE,MAAM,EAAE,KAAK;MAAEC,IAAI,EAAEa,IAAI,CAACX;IAAS,CAAC,CAAC,CAAC;EACvE,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdd,WAAW,CAAC,CACV,GAAGJ,WAAW,EACd;MAAEE,MAAM,EAAE,KAAK;MAAEC,IAAI,EAAE;IAA4C,CAAC,CACrE,CAAC;EACJ;EAEAgB,QAAQ,CAAC,EAAE,CAAC;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}